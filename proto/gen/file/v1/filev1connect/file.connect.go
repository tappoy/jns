// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: file/v1/file.proto

package filev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tappoy/jns/gen/file/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "file.v1.FileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileServicePostFileProcedure is the fully-qualified name of the FileService's PostFile RPC.
	FileServicePostFileProcedure = "/file.v1.FileService/PostFile"
	// FileServiceGetFileProcedure is the fully-qualified name of the FileService's GetFile RPC.
	FileServiceGetFileProcedure = "/file.v1.FileService/GetFile"
	// FileServiceGetDirProcedure is the fully-qualified name of the FileService's GetDir RPC.
	FileServiceGetDirProcedure = "/file.v1.FileService/GetDir"
	// FileServiceGCFileProcedure is the fully-qualified name of the FileService's GCFile RPC.
	FileServiceGCFileProcedure = "/file.v1.FileService/GCFile"
	// FileServiceGCDirProcedure is the fully-qualified name of the FileService's GCDir RPC.
	FileServiceGCDirProcedure = "/file.v1.FileService/GCDir"
	// FileServiceVacuumProcedure is the fully-qualified name of the FileService's Vacuum RPC.
	FileServiceVacuumProcedure = "/file.v1.FileService/Vacuum"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	fileServiceServiceDescriptor        = v1.File_file_v1_file_proto.Services().ByName("FileService")
	fileServicePostFileMethodDescriptor = fileServiceServiceDescriptor.Methods().ByName("PostFile")
	fileServiceGetFileMethodDescriptor  = fileServiceServiceDescriptor.Methods().ByName("GetFile")
	fileServiceGetDirMethodDescriptor   = fileServiceServiceDescriptor.Methods().ByName("GetDir")
	fileServiceGCFileMethodDescriptor   = fileServiceServiceDescriptor.Methods().ByName("GCFile")
	fileServiceGCDirMethodDescriptor    = fileServiceServiceDescriptor.Methods().ByName("GCDir")
	fileServiceVacuumMethodDescriptor   = fileServiceServiceDescriptor.Methods().ByName("Vacuum")
)

// FileServiceClient is a client for the file.v1.FileService service.
type FileServiceClient interface {
	PostFile(context.Context, *connect.Request[v1.PostFileRequest]) (*connect.Response[v1.PostFileResponse], error)
	GetFile(context.Context, *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error)
	GetDir(context.Context, *connect.Request[v1.GetDirRequest]) (*connect.Response[v1.GetDirResponse], error)
	GCFile(context.Context, *connect.Request[v1.GCFileRequest]) (*connect.Response[v1.GCFileResponse], error)
	GCDir(context.Context, *connect.Request[v1.GCDirRequest]) (*connect.Response[v1.GCDirResponse], error)
	Vacuum(context.Context, *connect.Request[v1.VacuumRequest]) (*connect.Response[v1.VacuumResponse], error)
}

// NewFileServiceClient constructs a client for the file.v1.FileService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fileServiceClient{
		postFile: connect.NewClient[v1.PostFileRequest, v1.PostFileResponse](
			httpClient,
			baseURL+FileServicePostFileProcedure,
			connect.WithSchema(fileServicePostFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFile: connect.NewClient[v1.GetFileRequest, v1.GetFileResponse](
			httpClient,
			baseURL+FileServiceGetFileProcedure,
			connect.WithSchema(fileServiceGetFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDir: connect.NewClient[v1.GetDirRequest, v1.GetDirResponse](
			httpClient,
			baseURL+FileServiceGetDirProcedure,
			connect.WithSchema(fileServiceGetDirMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		gCFile: connect.NewClient[v1.GCFileRequest, v1.GCFileResponse](
			httpClient,
			baseURL+FileServiceGCFileProcedure,
			connect.WithSchema(fileServiceGCFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		gCDir: connect.NewClient[v1.GCDirRequest, v1.GCDirResponse](
			httpClient,
			baseURL+FileServiceGCDirProcedure,
			connect.WithSchema(fileServiceGCDirMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vacuum: connect.NewClient[v1.VacuumRequest, v1.VacuumResponse](
			httpClient,
			baseURL+FileServiceVacuumProcedure,
			connect.WithSchema(fileServiceVacuumMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	postFile *connect.Client[v1.PostFileRequest, v1.PostFileResponse]
	getFile  *connect.Client[v1.GetFileRequest, v1.GetFileResponse]
	getDir   *connect.Client[v1.GetDirRequest, v1.GetDirResponse]
	gCFile   *connect.Client[v1.GCFileRequest, v1.GCFileResponse]
	gCDir    *connect.Client[v1.GCDirRequest, v1.GCDirResponse]
	vacuum   *connect.Client[v1.VacuumRequest, v1.VacuumResponse]
}

// PostFile calls file.v1.FileService.PostFile.
func (c *fileServiceClient) PostFile(ctx context.Context, req *connect.Request[v1.PostFileRequest]) (*connect.Response[v1.PostFileResponse], error) {
	return c.postFile.CallUnary(ctx, req)
}

// GetFile calls file.v1.FileService.GetFile.
func (c *fileServiceClient) GetFile(ctx context.Context, req *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error) {
	return c.getFile.CallUnary(ctx, req)
}

// GetDir calls file.v1.FileService.GetDir.
func (c *fileServiceClient) GetDir(ctx context.Context, req *connect.Request[v1.GetDirRequest]) (*connect.Response[v1.GetDirResponse], error) {
	return c.getDir.CallUnary(ctx, req)
}

// GCFile calls file.v1.FileService.GCFile.
func (c *fileServiceClient) GCFile(ctx context.Context, req *connect.Request[v1.GCFileRequest]) (*connect.Response[v1.GCFileResponse], error) {
	return c.gCFile.CallUnary(ctx, req)
}

// GCDir calls file.v1.FileService.GCDir.
func (c *fileServiceClient) GCDir(ctx context.Context, req *connect.Request[v1.GCDirRequest]) (*connect.Response[v1.GCDirResponse], error) {
	return c.gCDir.CallUnary(ctx, req)
}

// Vacuum calls file.v1.FileService.Vacuum.
func (c *fileServiceClient) Vacuum(ctx context.Context, req *connect.Request[v1.VacuumRequest]) (*connect.Response[v1.VacuumResponse], error) {
	return c.vacuum.CallUnary(ctx, req)
}

// FileServiceHandler is an implementation of the file.v1.FileService service.
type FileServiceHandler interface {
	PostFile(context.Context, *connect.Request[v1.PostFileRequest]) (*connect.Response[v1.PostFileResponse], error)
	GetFile(context.Context, *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error)
	GetDir(context.Context, *connect.Request[v1.GetDirRequest]) (*connect.Response[v1.GetDirResponse], error)
	GCFile(context.Context, *connect.Request[v1.GCFileRequest]) (*connect.Response[v1.GCFileResponse], error)
	GCDir(context.Context, *connect.Request[v1.GCDirRequest]) (*connect.Response[v1.GCDirResponse], error)
	Vacuum(context.Context, *connect.Request[v1.VacuumRequest]) (*connect.Response[v1.VacuumResponse], error)
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileServicePostFileHandler := connect.NewUnaryHandler(
		FileServicePostFileProcedure,
		svc.PostFile,
		connect.WithSchema(fileServicePostFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceGetFileHandler := connect.NewUnaryHandler(
		FileServiceGetFileProcedure,
		svc.GetFile,
		connect.WithSchema(fileServiceGetFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceGetDirHandler := connect.NewUnaryHandler(
		FileServiceGetDirProcedure,
		svc.GetDir,
		connect.WithSchema(fileServiceGetDirMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceGCFileHandler := connect.NewUnaryHandler(
		FileServiceGCFileProcedure,
		svc.GCFile,
		connect.WithSchema(fileServiceGCFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceGCDirHandler := connect.NewUnaryHandler(
		FileServiceGCDirProcedure,
		svc.GCDir,
		connect.WithSchema(fileServiceGCDirMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceVacuumHandler := connect.NewUnaryHandler(
		FileServiceVacuumProcedure,
		svc.Vacuum,
		connect.WithSchema(fileServiceVacuumMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/file.v1.FileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileServicePostFileProcedure:
			fileServicePostFileHandler.ServeHTTP(w, r)
		case FileServiceGetFileProcedure:
			fileServiceGetFileHandler.ServeHTTP(w, r)
		case FileServiceGetDirProcedure:
			fileServiceGetDirHandler.ServeHTTP(w, r)
		case FileServiceGCFileProcedure:
			fileServiceGCFileHandler.ServeHTTP(w, r)
		case FileServiceGCDirProcedure:
			fileServiceGCDirHandler.ServeHTTP(w, r)
		case FileServiceVacuumProcedure:
			fileServiceVacuumHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) PostFile(context.Context, *connect.Request[v1.PostFileRequest]) (*connect.Response[v1.PostFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("file.v1.FileService.PostFile is not implemented"))
}

func (UnimplementedFileServiceHandler) GetFile(context.Context, *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("file.v1.FileService.GetFile is not implemented"))
}

func (UnimplementedFileServiceHandler) GetDir(context.Context, *connect.Request[v1.GetDirRequest]) (*connect.Response[v1.GetDirResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("file.v1.FileService.GetDir is not implemented"))
}

func (UnimplementedFileServiceHandler) GCFile(context.Context, *connect.Request[v1.GCFileRequest]) (*connect.Response[v1.GCFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("file.v1.FileService.GCFile is not implemented"))
}

func (UnimplementedFileServiceHandler) GCDir(context.Context, *connect.Request[v1.GCDirRequest]) (*connect.Response[v1.GCDirResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("file.v1.FileService.GCDir is not implemented"))
}

func (UnimplementedFileServiceHandler) Vacuum(context.Context, *connect.Request[v1.VacuumRequest]) (*connect.Response[v1.VacuumResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("file.v1.FileService.Vacuum is not implemented"))
}
