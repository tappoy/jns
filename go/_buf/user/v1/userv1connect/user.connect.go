// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tappoy/jns/go/_buf/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "user.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceVersionProcedure is the fully-qualified name of the UserService's Version RPC.
	UserServiceVersionProcedure = "/user.v1.UserService/Version"
	// UserServicePostUserProcedure is the fully-qualified name of the UserService's PostUser RPC.
	UserServicePostUserProcedure = "/user.v1.UserService/PostUser"
	// UserServicePutPasswordProcedure is the fully-qualified name of the UserService's PutPassword RPC.
	UserServicePutPasswordProcedure = "/user.v1.UserService/PutPassword"
	// UserServiceAuthProcedure is the fully-qualified name of the UserService's Auth RPC.
	UserServiceAuthProcedure = "/user.v1.UserService/Auth"
	// UserServicePutResetPasswordApplicationProcedure is the fully-qualified name of the UserService's
	// PutResetPasswordApplication RPC.
	UserServicePutResetPasswordApplicationProcedure = "/user.v1.UserService/PutResetPasswordApplication"
	// UserServiceVacuumProcedure is the fully-qualified name of the UserService's Vacuum RPC.
	UserServiceVacuumProcedure = "/user.v1.UserService/Vacuum"
	// UserServicePutEmailProcedure is the fully-qualified name of the UserService's PutEmail RPC.
	UserServicePutEmailProcedure = "/user.v1.UserService/PutEmail"
	// UserServiceGetEmailProcedure is the fully-qualified name of the UserService's GetEmail RPC.
	UserServiceGetEmailProcedure = "/user.v1.UserService/GetEmail"
	// UserServiceDeleteEmailProcedure is the fully-qualified name of the UserService's DeleteEmail RPC.
	UserServiceDeleteEmailProcedure = "/user.v1.UserService/DeleteEmail"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServiceServiceDescriptor                           = v1.File_user_v1_user_proto.Services().ByName("UserService")
	userServiceVersionMethodDescriptor                     = userServiceServiceDescriptor.Methods().ByName("Version")
	userServicePostUserMethodDescriptor                    = userServiceServiceDescriptor.Methods().ByName("PostUser")
	userServicePutPasswordMethodDescriptor                 = userServiceServiceDescriptor.Methods().ByName("PutPassword")
	userServiceAuthMethodDescriptor                        = userServiceServiceDescriptor.Methods().ByName("Auth")
	userServicePutResetPasswordApplicationMethodDescriptor = userServiceServiceDescriptor.Methods().ByName("PutResetPasswordApplication")
	userServiceVacuumMethodDescriptor                      = userServiceServiceDescriptor.Methods().ByName("Vacuum")
	userServicePutEmailMethodDescriptor                    = userServiceServiceDescriptor.Methods().ByName("PutEmail")
	userServiceGetEmailMethodDescriptor                    = userServiceServiceDescriptor.Methods().ByName("GetEmail")
	userServiceDeleteEmailMethodDescriptor                 = userServiceServiceDescriptor.Methods().ByName("DeleteEmail")
)

// UserServiceClient is a client for the user.v1.UserService service.
type UserServiceClient interface {
	// public
	Version(context.Context, *connect.Request[v1.VersionRequest]) (*connect.Response[v1.VersionResponse], error)
	PostUser(context.Context, *connect.Request[v1.PostUserRequest]) (*connect.Response[v1.PostUserResponse], error)
	PutPassword(context.Context, *connect.Request[v1.PutPasswordRequest]) (*connect.Response[v1.PutPasswordResponse], error)
	// private
	Auth(context.Context, *connect.Request[v1.AuthRequest]) (*connect.Response[v1.AuthResponse], error)
	PutResetPasswordApplication(context.Context, *connect.Request[v1.PutResetPasswordApplicationRequest]) (*connect.Response[v1.PutResetPasswordApplicationResponse], error)
	Vacuum(context.Context, *connect.Request[v1.VacuumRequest]) (*connect.Response[v1.VacuumResponse], error)
	PutEmail(context.Context, *connect.Request[v1.PutEmailRequest]) (*connect.Response[v1.PutEmailResponse], error)
	GetEmail(context.Context, *connect.Request[v1.GetEmailRequest]) (*connect.Response[v1.GetEmailResponse], error)
	DeleteEmail(context.Context, *connect.Request[v1.DeleteEmailRequest]) (*connect.Response[v1.DeleteEmailResponse], error)
}

// NewUserServiceClient constructs a client for the user.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		version: connect.NewClient[v1.VersionRequest, v1.VersionResponse](
			httpClient,
			baseURL+UserServiceVersionProcedure,
			connect.WithSchema(userServiceVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		postUser: connect.NewClient[v1.PostUserRequest, v1.PostUserResponse](
			httpClient,
			baseURL+UserServicePostUserProcedure,
			connect.WithSchema(userServicePostUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		putPassword: connect.NewClient[v1.PutPasswordRequest, v1.PutPasswordResponse](
			httpClient,
			baseURL+UserServicePutPasswordProcedure,
			connect.WithSchema(userServicePutPasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		auth: connect.NewClient[v1.AuthRequest, v1.AuthResponse](
			httpClient,
			baseURL+UserServiceAuthProcedure,
			connect.WithSchema(userServiceAuthMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		putResetPasswordApplication: connect.NewClient[v1.PutResetPasswordApplicationRequest, v1.PutResetPasswordApplicationResponse](
			httpClient,
			baseURL+UserServicePutResetPasswordApplicationProcedure,
			connect.WithSchema(userServicePutResetPasswordApplicationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vacuum: connect.NewClient[v1.VacuumRequest, v1.VacuumResponse](
			httpClient,
			baseURL+UserServiceVacuumProcedure,
			connect.WithSchema(userServiceVacuumMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		putEmail: connect.NewClient[v1.PutEmailRequest, v1.PutEmailResponse](
			httpClient,
			baseURL+UserServicePutEmailProcedure,
			connect.WithSchema(userServicePutEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEmail: connect.NewClient[v1.GetEmailRequest, v1.GetEmailResponse](
			httpClient,
			baseURL+UserServiceGetEmailProcedure,
			connect.WithSchema(userServiceGetEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteEmail: connect.NewClient[v1.DeleteEmailRequest, v1.DeleteEmailResponse](
			httpClient,
			baseURL+UserServiceDeleteEmailProcedure,
			connect.WithSchema(userServiceDeleteEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	version                     *connect.Client[v1.VersionRequest, v1.VersionResponse]
	postUser                    *connect.Client[v1.PostUserRequest, v1.PostUserResponse]
	putPassword                 *connect.Client[v1.PutPasswordRequest, v1.PutPasswordResponse]
	auth                        *connect.Client[v1.AuthRequest, v1.AuthResponse]
	putResetPasswordApplication *connect.Client[v1.PutResetPasswordApplicationRequest, v1.PutResetPasswordApplicationResponse]
	vacuum                      *connect.Client[v1.VacuumRequest, v1.VacuumResponse]
	putEmail                    *connect.Client[v1.PutEmailRequest, v1.PutEmailResponse]
	getEmail                    *connect.Client[v1.GetEmailRequest, v1.GetEmailResponse]
	deleteEmail                 *connect.Client[v1.DeleteEmailRequest, v1.DeleteEmailResponse]
}

// Version calls user.v1.UserService.Version.
func (c *userServiceClient) Version(ctx context.Context, req *connect.Request[v1.VersionRequest]) (*connect.Response[v1.VersionResponse], error) {
	return c.version.CallUnary(ctx, req)
}

// PostUser calls user.v1.UserService.PostUser.
func (c *userServiceClient) PostUser(ctx context.Context, req *connect.Request[v1.PostUserRequest]) (*connect.Response[v1.PostUserResponse], error) {
	return c.postUser.CallUnary(ctx, req)
}

// PutPassword calls user.v1.UserService.PutPassword.
func (c *userServiceClient) PutPassword(ctx context.Context, req *connect.Request[v1.PutPasswordRequest]) (*connect.Response[v1.PutPasswordResponse], error) {
	return c.putPassword.CallUnary(ctx, req)
}

// Auth calls user.v1.UserService.Auth.
func (c *userServiceClient) Auth(ctx context.Context, req *connect.Request[v1.AuthRequest]) (*connect.Response[v1.AuthResponse], error) {
	return c.auth.CallUnary(ctx, req)
}

// PutResetPasswordApplication calls user.v1.UserService.PutResetPasswordApplication.
func (c *userServiceClient) PutResetPasswordApplication(ctx context.Context, req *connect.Request[v1.PutResetPasswordApplicationRequest]) (*connect.Response[v1.PutResetPasswordApplicationResponse], error) {
	return c.putResetPasswordApplication.CallUnary(ctx, req)
}

// Vacuum calls user.v1.UserService.Vacuum.
func (c *userServiceClient) Vacuum(ctx context.Context, req *connect.Request[v1.VacuumRequest]) (*connect.Response[v1.VacuumResponse], error) {
	return c.vacuum.CallUnary(ctx, req)
}

// PutEmail calls user.v1.UserService.PutEmail.
func (c *userServiceClient) PutEmail(ctx context.Context, req *connect.Request[v1.PutEmailRequest]) (*connect.Response[v1.PutEmailResponse], error) {
	return c.putEmail.CallUnary(ctx, req)
}

// GetEmail calls user.v1.UserService.GetEmail.
func (c *userServiceClient) GetEmail(ctx context.Context, req *connect.Request[v1.GetEmailRequest]) (*connect.Response[v1.GetEmailResponse], error) {
	return c.getEmail.CallUnary(ctx, req)
}

// DeleteEmail calls user.v1.UserService.DeleteEmail.
func (c *userServiceClient) DeleteEmail(ctx context.Context, req *connect.Request[v1.DeleteEmailRequest]) (*connect.Response[v1.DeleteEmailResponse], error) {
	return c.deleteEmail.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the user.v1.UserService service.
type UserServiceHandler interface {
	// public
	Version(context.Context, *connect.Request[v1.VersionRequest]) (*connect.Response[v1.VersionResponse], error)
	PostUser(context.Context, *connect.Request[v1.PostUserRequest]) (*connect.Response[v1.PostUserResponse], error)
	PutPassword(context.Context, *connect.Request[v1.PutPasswordRequest]) (*connect.Response[v1.PutPasswordResponse], error)
	// private
	Auth(context.Context, *connect.Request[v1.AuthRequest]) (*connect.Response[v1.AuthResponse], error)
	PutResetPasswordApplication(context.Context, *connect.Request[v1.PutResetPasswordApplicationRequest]) (*connect.Response[v1.PutResetPasswordApplicationResponse], error)
	Vacuum(context.Context, *connect.Request[v1.VacuumRequest]) (*connect.Response[v1.VacuumResponse], error)
	PutEmail(context.Context, *connect.Request[v1.PutEmailRequest]) (*connect.Response[v1.PutEmailResponse], error)
	GetEmail(context.Context, *connect.Request[v1.GetEmailRequest]) (*connect.Response[v1.GetEmailResponse], error)
	DeleteEmail(context.Context, *connect.Request[v1.DeleteEmailRequest]) (*connect.Response[v1.DeleteEmailResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceVersionHandler := connect.NewUnaryHandler(
		UserServiceVersionProcedure,
		svc.Version,
		connect.WithSchema(userServiceVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePostUserHandler := connect.NewUnaryHandler(
		UserServicePostUserProcedure,
		svc.PostUser,
		connect.WithSchema(userServicePostUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePutPasswordHandler := connect.NewUnaryHandler(
		UserServicePutPasswordProcedure,
		svc.PutPassword,
		connect.WithSchema(userServicePutPasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceAuthHandler := connect.NewUnaryHandler(
		UserServiceAuthProcedure,
		svc.Auth,
		connect.WithSchema(userServiceAuthMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePutResetPasswordApplicationHandler := connect.NewUnaryHandler(
		UserServicePutResetPasswordApplicationProcedure,
		svc.PutResetPasswordApplication,
		connect.WithSchema(userServicePutResetPasswordApplicationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceVacuumHandler := connect.NewUnaryHandler(
		UserServiceVacuumProcedure,
		svc.Vacuum,
		connect.WithSchema(userServiceVacuumMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePutEmailHandler := connect.NewUnaryHandler(
		UserServicePutEmailProcedure,
		svc.PutEmail,
		connect.WithSchema(userServicePutEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetEmailHandler := connect.NewUnaryHandler(
		UserServiceGetEmailProcedure,
		svc.GetEmail,
		connect.WithSchema(userServiceGetEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteEmailHandler := connect.NewUnaryHandler(
		UserServiceDeleteEmailProcedure,
		svc.DeleteEmail,
		connect.WithSchema(userServiceDeleteEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceVersionProcedure:
			userServiceVersionHandler.ServeHTTP(w, r)
		case UserServicePostUserProcedure:
			userServicePostUserHandler.ServeHTTP(w, r)
		case UserServicePutPasswordProcedure:
			userServicePutPasswordHandler.ServeHTTP(w, r)
		case UserServiceAuthProcedure:
			userServiceAuthHandler.ServeHTTP(w, r)
		case UserServicePutResetPasswordApplicationProcedure:
			userServicePutResetPasswordApplicationHandler.ServeHTTP(w, r)
		case UserServiceVacuumProcedure:
			userServiceVacuumHandler.ServeHTTP(w, r)
		case UserServicePutEmailProcedure:
			userServicePutEmailHandler.ServeHTTP(w, r)
		case UserServiceGetEmailProcedure:
			userServiceGetEmailHandler.ServeHTTP(w, r)
		case UserServiceDeleteEmailProcedure:
			userServiceDeleteEmailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) Version(context.Context, *connect.Request[v1.VersionRequest]) (*connect.Response[v1.VersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.Version is not implemented"))
}

func (UnimplementedUserServiceHandler) PostUser(context.Context, *connect.Request[v1.PostUserRequest]) (*connect.Response[v1.PostUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.PostUser is not implemented"))
}

func (UnimplementedUserServiceHandler) PutPassword(context.Context, *connect.Request[v1.PutPasswordRequest]) (*connect.Response[v1.PutPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.PutPassword is not implemented"))
}

func (UnimplementedUserServiceHandler) Auth(context.Context, *connect.Request[v1.AuthRequest]) (*connect.Response[v1.AuthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.Auth is not implemented"))
}

func (UnimplementedUserServiceHandler) PutResetPasswordApplication(context.Context, *connect.Request[v1.PutResetPasswordApplicationRequest]) (*connect.Response[v1.PutResetPasswordApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.PutResetPasswordApplication is not implemented"))
}

func (UnimplementedUserServiceHandler) Vacuum(context.Context, *connect.Request[v1.VacuumRequest]) (*connect.Response[v1.VacuumResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.Vacuum is not implemented"))
}

func (UnimplementedUserServiceHandler) PutEmail(context.Context, *connect.Request[v1.PutEmailRequest]) (*connect.Response[v1.PutEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.PutEmail is not implemented"))
}

func (UnimplementedUserServiceHandler) GetEmail(context.Context, *connect.Request[v1.GetEmailRequest]) (*connect.Response[v1.GetEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.GetEmail is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteEmail(context.Context, *connect.Request[v1.DeleteEmailRequest]) (*connect.Response[v1.DeleteEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.DeleteEmail is not implemented"))
}
